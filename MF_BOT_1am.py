# MF_BOT_1am.py

import nextcord
from nextcord.ext import commands, tasks
from nextcord.utils import get
from dotenv import load_dotenv
from nextcord import InteractionType
import os
import asyncio
from datetime import datetime, timedelta, timezone
import aiohttp
import logging
import json
from keep_alive import keep_alive

logging.basicConfig(level=logging.INFO)              # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô DEBUG ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
logger = logging.getLogger("mf_bot")

# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å .env
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
VC_CHANNEL_ID = int(os.getenv("VC_CHANNEL_ID"))
TEXT_CHANNEL_ID = int(os.getenv("TEXT_CHANNEL_ID"))
STATUS_UPDATE_INTERVAL = int(os.getenv("STATUS_UPDATE_INTERVAL", 30))

intents = nextcord.Intents.all()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

joined_users = set()
RAID_DB_PATH = "raid_check.json"
last_voice_states = {}

voice_connect_lock = asyncio.Lock()
voice_client = None

ROLE_ID = 1372176652989239336  # ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ
BOT_CHANNEL_ID = 1403316515956064327
CheckRaid_Channel_ID = 1385971877079679006
# ====== THEME / BRAND ======
BANNER_URL = "https://i.ibb.co/3kZ0xFq/mf-logo.png"  # ‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå/‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
ACCENT_COLOR = nextcord.Color.from_rgb(246, 189, 22)  # ‡πÇ‡∏ó‡∏ô‡∏ó‡∏≠‡∏á 1AM
FOOTER_ICON = "https://i.ibb.co/3kZ0xFq/mf-logo.png"
FOOTER_TEXT = "MF_BOT ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
# ============================

def _load_raid_db():
    try:
        with open(RAID_DB_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}  # {message_id: { "date":"YYYY-MM-DD", "accept":[uid], "decline":[uid], "summary_posted": bool}}

def _save_raid_db(data: dict):
    try:
        with open(RAID_DB_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[WARN] save raid db failed: {e}")

raid_db = _load_raid_db()

# ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (Asia/Bangkok) = UTC+7 ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
BKK = timezone(timedelta(hours=7))

def build_register_embed(ctx: nextcord.ext.commands.Context) -> nextcord.Embed:
    # ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    guild_icon = ctx.guild.icon.url if ctx.guild and ctx.guild.icon else None

    embed = nextcord.Embed(
        title="üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1AM SCUM TEAM",
        description=(
            "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏\n\n"
            "**‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç**\n"
            "‚Ä¢ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ **‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô**\n"
            "‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô (‡∏≠‡∏≤‡∏¢‡∏∏)`\n"
            "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ï‡∏∏‡∏¢\n"
        ),
        color=ACCENT_COLOR,
        timestamp=nextcord.utils.utcnow()
    )
    # ‡πÅ‡∏ñ‡∏ö‡∏´‡∏±‡∏ß embed
    if guild_icon:
        embed.set_author(name=ctx.guild.name, icon_url=guild_icon)

    # ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á/‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
    # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏° ‡∏Å‡∏î‡πÉ‡∏ä‡πâ set_image; ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ thumbnail ‡πÄ‡∏•‡πá‡∏Å ‡πÉ‡∏ä‡πâ set_thumbnail
    embed.set_image(url=BANNER_URL)

    # ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    embed.add_field(
        name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        value="1) ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n2) ‡∏Å‡∏£‡∏≠‡∏Å **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô** ‡πÅ‡∏•‡∏∞ **‡∏≠‡∏≤‡∏¢‡∏∏**\n3) ‡∏Å‡∏î‡∏™‡πà‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•",
        inline=False
    )

    # ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    embed.add_field(
        name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå",
        value="`‡∏ä‡∏∑‡πà‡∏≠: ‡∏°‡πá‡∏≠‡∏õ‡πÅ‡∏°‡πá‡∏õ‡∏´‡∏≥49  | ‡∏≠‡∏≤‡∏¢‡∏∏: 33  ‚Üí  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô  ‡∏°‡πá‡∏≠‡∏õ‡πÅ‡∏°‡πá‡∏õ‡∏´‡∏≥49 (33)`",
        inline=False
    )

    # ‡∏ó‡πâ‡∏≤‡∏¢ embed
    embed.set_footer(text=FOOTER_TEXT, icon_url=FOOTER_ICON)
    return embed


REG_DB_PATH = "registrations.json"

def load_reg_db() -> set[int]:
    try:
        with open(REG_DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(map(int, data))
    except Exception:
        return set()

def save_reg_db(user_ids: set[int]) -> None:
    try:
        with open(REG_DB_PATH, "w", encoding="utf-8") as f:
            json.dump(list(user_ids), f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[WARN] save_reg_db failed: {e}")

registered_users: set[int] = load_reg_db()
MAX_NICK_LEN = 32

# -----------------------------
# ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ Role
# -----------------------------
class RoleMessageView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.button(label="Alarm", style=nextcord.ButtonStyle.success)
    async def register_button(self, interaction: nextcord.Interaction, button: nextcord.ui.Button):
        await self.send_to_role(interaction, "üì¢ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å MF_BOT ‡∏à‡πâ‡∏≤! ‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏¥‡∏™‡∏î‡πà‡∏ß‡∏ô‡∏ô !!")

    async def send_to_role(self, interaction: nextcord.Interaction, message_text: str):
        role = interaction.guild.get_role(ROLE_ID)
        if not role:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ", ephemeral=True)
            return

        sent_count = 0
        for member in role.members:
            try:
                await member.send(message_text)
                sent_count += 1
                await asyncio.sleep(0.5)  # ‡∏Å‡∏±‡∏ô rate limit
            except:
                pass

        await interaction.response.send_message(f"üì® ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ {sent_count} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@bot.command()
async def ‡∏õ‡∏∏‡πà‡∏°(ctx):
    await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° DM ‡πÑ‡∏õ‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", view=RoleMessageView())

@bot.command()
async def ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠(ctx):
    if ctx.channel.id == CheckRaid_Channel_ID:
        today = datetime.datetime.now().strftime("%d/%m/%y")
        role_mention = f"<@&{ROLE_ID}>"
        msg = await ctx.send(f"üåÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ Raid/Protect ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {today} ‡∏Ñ‡∏£‡∏±‡∏ö {role_mention} üí™üî•")
        await msg.add_reaction("‚úÖ")
        await msg.add_reaction("‚ùå")
    else:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!")

# -----------------------------
# Event ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
# -----------------------------
@bot.event
async def on_member_join(member):
    channel = bot.get_channel(1342083527067304030) #ID channel welcome
    if channel:
        embed = nextcord.Embed(
            title="ü•á ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà 1am SCUM TEAM ü•á",
            description=f"üôè ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤ {member.mention}\n‡∏°‡∏≤‡∏ô‡∏±‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πä‡∏¢!",
            color=0xFFD700
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.set_image(url="https://i.ibb.co/3kZ0xFq/mf-logo.png")
        embed.set_footer(text="MF_BOT ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö", icon_url="https://i.ibb.co/3kZ0xFq/mf-logo.png")
        await channel.send(embed=embed)

@bot.event
async def on_member_remove(member):
    channel = bot.get_channel(1342083527067304030) #ID channel Goodbye
    if channel:
        embed = nextcord.Embed(
            title="üò¢ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
            description=f"{member.name} ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß",
            color=0xFFD700
        )
        await channel.send(embed=embed)

# -----------------------------
# Voice TTS
# -----------------------------
def tts_url(text):
    return f"https://translate.google.com/translate_tts?ie=UTF-8&q={text}&tl=th&client=tw-ob"

async def play_tts(vc, text):
    url = tts_url(text)
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                print(f"Failed to get TTS: {resp.status}")
                return
            with open("tts.mp3", "wb") as f:
                f.write(await resp.read())

    if not vc.is_playing():
        vc.play(nextcord.FFmpegPCMAudio("tts.mp3"))
        while vc.is_playing():
            await asyncio.sleep(1)

# -----------------------------
# Ready / Status Loop
# -----------------------------
# @bot.event
# async def on_ready():
#     bot.add_view(RegisterView())    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà
#     bot.add_view(RoleMessageView()) # ‡πÄ‡∏ä‡πà‡∏ô‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÑ‡∏ß‡πâ
#     print(f"Logged in as {bot.user} ({bot.user.id})")
#     update_status.start()

@tasks.loop(seconds=STATUS_UPDATE_INTERVAL)
async def update_status():
    guild = bot.get_guild(GUILD_ID)
    if guild:
        online_members = [m for m in guild.members if m.status != nextcord.Status.offline and not m.bot]
        activity = nextcord.Game(name=f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå {len(online_members)} ‡∏Ñ‡∏ô")
        await bot.change_presence(status=nextcord.Status.online, activity=activity)

# -----------------------------
# Voice State Update
# -----------------------------

def non_bot_count(ch: nextcord.VoiceChannel) -> int:
    return sum(1 for m in ch.members if not m.bot)

@bot.event
async def on_voice_state_update(member, before, after):
    global voice_client

    if member.bot:
        return

    voice_channel = bot.get_channel(VC_CHANNEL_ID)
    if not voice_channel:
        return

    try:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ voice_client ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        vc_now = nextcord.utils.get(bot.voice_clients, guild=member.guild)
        if vc_now is not None:
            voice_client = vc_now

        # 1) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô (non-bot) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ -> ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏î
        if non_bot_count(voice_channel) == 0:
            if voice_client and voice_client.is_connected():
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏ô‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÅ‡∏Å‡∏ß‡πà‡∏á
                await asyncio.sleep(5)
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≠‡∏î
                if non_bot_count(voice_channel) == 0:
                    await voice_client.disconnect(force=True)
                    voice_client = None
                    print("Bot ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà")
            return

        # 2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠ -> ‡∏ï‡πà‡∏≠ (‡πÇ‡∏î‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏±‡∏ô connect ‡∏ã‡πâ‡∏≠‡∏ô)
        if voice_client is None or not voice_client.is_connected():
            async with voice_connect_lock:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡∏Å event ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                vc_now = nextcord.utils.get(bot.voice_clients, guild=member.guild)
                if vc_now is None or not vc_now.is_connected():
                    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
                    voice_client = await voice_channel.connect(reconnect=False)  # ‡∏õ‡∏¥‡∏î auto reconnect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ã‡πâ‡∏≠‡∏ô
                    print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß")

        # ====== ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å/‡∏õ‡∏¥‡∏î‡∏´‡∏π ‡∏Ø‡∏•‡∏Ø ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥ ======
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
        # await play_tts(voice_client, f"{member.display_name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")
        # ============================================================

    except Exception as e:
        # ‡∏Å‡∏±‡∏ô‡∏•‡πâ‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡πä‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô nextcord / voice ws
        print(f"[ERROR] on_voice_state_update: {e}")

@bot.event
async def on_interaction(interaction: nextcord.Interaction):
    # log ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
    try:
        if interaction.type == InteractionType.modal_submit:
            print(f"[DEBUG] on_interaction: modal_submit by {interaction.user} ({interaction.user.id})")
        # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ nextcord ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠
    finally:
        await bot.process_application_commands(interaction)

# ------- Register Modal (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢/‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡∏Ñ‡∏£‡∏ö) -------
class RegisterModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__(title="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1am SCUM TEAM")
        self.nickname = nextcord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", max_length=32)
        self.age = nextcord.ui.TextInput(label="‡∏≠‡∏≤‡∏¢‡∏∏", placeholder="‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", max_length=3)
        self.add_item(self.nickname)
        self.add_item(self.age)

    async def callback(self, interaction: nextcord.Interaction):
        await self._handle_submit(interaction)

    async def on_submit(self, interaction: nextcord.Interaction):
        await self._handle_submit(interaction)

    async def _handle_submit(self, interaction: nextcord.Interaction):
        user_id = interaction.user.id

        # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏ß‡πâ
        if user_id in registered_users:
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å", ephemeral=True)
            return

        # ‡∏£‡∏±‡∏ö interaction ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏Å‡∏±‡∏ô timeout
        if not interaction.response.is_done():
            await interaction.response.defer(ephemeral=True)

        guild: nextcord.Guild = interaction.guild
        member: nextcord.Member = guild.get_member(user_id) or await guild.fetch_member(user_id)
        bot_member: nextcord.Member = guild.get_member(bot.user.id) or await guild.fetch_member(bot.user.id)

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
        base_nick = f"{self.nickname.value.strip()} ({self.age.value.strip()})"
        new_nick = base_nick[:MAX_NICK_LEN]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå/‡∏•‡∏≥‡∏î‡∏±‡∏ö role ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        reasons = []
        perms = guild.me.guild_permissions
        if not perms.manage_nicknames:
            reasons.append("‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå **Manage Nicknames**")
        if guild.owner_id == member.id:
            reasons.append("‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ **‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå** ‡πÑ‡∏î‡πâ")
        if bot_member.top_role <= member.top_role:
            reasons.append("**‡∏•‡∏≥‡∏î‡∏±‡∏ö Role ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤** ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠")

        if reasons:
            # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå/‡∏•‡∏≥‡∏î‡∏±‡∏ö role ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
            msg = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å:\n- " + "\n- ".join(reasons)
            await interaction.followup.send(msg, ephemeral=True)
            return

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        try:
            await member.edit(nick=new_nick, reason="Registration")
        except nextcord.Forbidden:
            await interaction.followup.send(
                "‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Forbidden)\n"
                "- ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ **Manage Nicknames** ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó\n"
                "- ‡∏•‡∏≤‡∏Å Role ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                ephemeral=True
            )
            return
        except Exception as e:
            await interaction.followup.send(f"‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}", ephemeral=True)
            return

        # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ ‚Äú‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‚Äù ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•
        registered_users.add(user_id)
        save_reg_db(registered_users)
        await interaction.followup.send(
            f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏ä‡∏∑‡πà‡∏≠: **{self.nickname.value.strip()}**\n‡∏≠‡∏≤‡∏¢‡∏∏: **{self.age.value.strip()}**\n"
            f"üìù ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô **{new_nick}** ‡πÅ‡∏•‡πâ‡∏ß",
            ephemeral=True

        )

# ------- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏• (persistent view + ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á) -------
class RegisterView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # persistent view

    @nextcord.ui.button(
        label="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
        style=nextcord.ButtonStyle.success,
        custom_id="btn_register_v1",
        emoji="‚úÖ"
    )
    async def register(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
        await interaction.response.send_modal(RegisterModal())

# ------- on_ready: ‡∏ú‡∏π‡∏Å persistent view ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó -------


# ------- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà -------

@bot.command()
async def ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô(ctx):
    """‡∏™‡πà‡∏á Embed + ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Å‡∏î‡πÑ‡∏î‡πâ (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°/‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß)"""
    embed = build_register_embed(ctx)  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Embed ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
    await ctx.send(embed=embed, view=RegisterView())

@bot.command(name="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
@commands.has_permissions(administrator=True)
async def reset_registration(ctx, member: nextcord.Member):
    # ‡πÄ‡∏≠‡∏≤ user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ + ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå nick (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    try:
        if member.id in registered_users:
            registered_users.remove(member.id)
            save_reg_db(registered_users)
            # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô None ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á
            # await member.edit(nick=None, reason="Reset registration")

            await ctx.send(f"‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ {member.mention} ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ")
        else:
            await ctx.send(f"‚ÑπÔ∏è {member.mention} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        await ctx.send(f"‚ùå ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

@bot.command(name="‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
@commands.has_permissions(administrator=True)
async def check_registration(ctx, member: nextcord.Member):
    if member.id in registered_users:
        await ctx.send(f"‚úÖ {member.mention} ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    else:
        await ctx.send(f"‚ùå {member.mention} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")

class ControlPanel(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # persistent view

    @nextcord.ui.button(label="RAID_Check", style=nextcord.ButtonStyle.primary, emoji="üõ°Ô∏è", custom_id="btn_raid_check")
    async def btn_raid_check(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if interaction.channel.id != BOT_CHANNEL_ID:
            await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
            return

        check_ch = interaction.guild.get_channel(CheckRaid_Channel_ID)
        if not check_ch:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ Raid", ephemeral=True)
            return

        today = datetime.now(BKK).strftime("%d/%m/%y")
        role_mention = f"<@&{ROLE_ID}>"

        embed = nextcord.Embed(
            title="üåÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ Raid / Protect",
            description=f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{today}**\n{role_mention} ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\n"
                        f"‚Ä¢ *** ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 19.00 ‡∏ô. *** ‚Ä¢\n",
            color=nextcord.Color.from_rgb(246, 189, 22),
            timestamp=nextcord.utils.utcnow()
        )
        embed.set_footer(text="MF_BOT ‚Ä¢ RAID Check")

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡πà‡∏á view ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ message_id)
        tmp_msg = await check_ch.send(embed=embed)
        view = RaidCheckView(tmp_msg.id)
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        raid_db[str(tmp_msg.id)] = {
            "date": datetime.now(BKK).strftime("%Y-%m-%d"),
            "accept": [],
            "decline": [],
            "summary_posted": False
        }
        _save_raid_db(raid_db)

        # ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°
        await tmp_msg.edit(view=view)

        # ‡πÉ‡∏™‡πà reaction ‚úÖ ‚ùå 
        try:
            await tmp_msg.add_reaction("‚úÖ")
            await tmp_msg.add_reaction("‚ùå")
        except Exception:
            pass

        # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡∏∏‡∏õ 19:00 ‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
        await schedule_raid_summary(interaction.guild.id, tmp_msg.channel.id, tmp_msg.id)

        await interaction.response.send_message("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏•‡∏≤ 19:00 ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", ephemeral=True)
    # 2) Alarm DM: ‡∏™‡πà‡∏á DM ‡∏ñ‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô Role ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    @nextcord.ui.button(
        label="Alarm DM",
        style=nextcord.ButtonStyle.danger,
        emoji="üö®",
        custom_id="btn_alarm_dm"
    )
    async def btn_alarm_dm(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if interaction.channel.id != BOT_CHANNEL_ID:
            await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
            return

        role = interaction.guild.get_role(ROLE_ID)
        if not role:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (ROLE_ID)", ephemeral=True)
            return

        sent = 0
        failed = 0
        text = "üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πà‡∏ß‡∏ô: ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° RAID/Protect ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ!"
        await interaction.response.send_message("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á DM‚Ä¶ (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)", ephemeral=True)

        for m in role.members:
            try:
                await m.send(text)
                sent += 1
                await asyncio.sleep(0.3)  # ‡∏Å‡∏±‡∏ô rate limit
            except Exception:
                failed += 1

        # ‡πÉ‡∏ä‡πâ followup ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤ response ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        await interaction.followup.send(f"‚úÖ ‡∏™‡πà‡∏á DM ‡πÅ‡∏•‡πâ‡∏ß {sent} ‡∏Ñ‡∏ô ‚Ä¢ ‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {failed} ‡∏Ñ‡∏ô", ephemeral=True)

    # 3) Register: ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å modal ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    @nextcord.ui.button(
        label="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
        style=nextcord.ButtonStyle.success,
        emoji="‚úÖ",
        custom_id="btn_open_register"
    )
    async def btn_open_register(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if interaction.channel.id != BOT_CHANNEL_ID:
            await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
            return

        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥/‡πÑ‡∏ü‡∏•‡πå registrations.json ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
        user_id = interaction.user.id
        try:
            if user_id in registered_users:
                await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å", ephemeral=True)
                return
        except NameError:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö registered_users ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
            pass

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ RegisterModal ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        try:
            await interaction.response.send_modal(RegisterModal())
        except Exception as e:
            if not interaction.response.is_done():
                await interaction.response.send_message(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}", ephemeral=True)
            else:
                await interaction.followup.send(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}", ephemeral=True)
async def schedule_raid_summary(guild_id: int, channel_id: int, message_id: int):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 19:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå (Asia/Bangkok)"""
    now = datetime.now(BKK)
    target = now.replace(hour=19, minute=0, second=0, microsecond=0)
    if now >= target:
        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏´‡∏•‡∏±‡∏á 19:00 ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ 19:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        target = target + timedelta(days=1)

    delay = (target - now).total_seconds()

    async def _runner():
        try:
            await asyncio.sleep(delay)
            # ‡∏ï‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏£‡∏∏‡∏õ
            guild = bot.get_guild(guild_id)
            if not guild:
                return
            ch = guild.get_channel(channel_id)
            if not ch:
                return

            key = str(message_id)
            d = raid_db.get(key)
            if not d or d.get("summary_posted"):
                return

            accept_ids = list(set(d.get("accept", [])))
            decline_ids = list(set(d.get("decline", [])))
            accept_count = len(accept_ids)
            decline_count = len(decline_ids)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
            date_str = d.get("date", datetime.now(BKK).strftime("%Y-%m-%d"))
            def _mention_list(uids):
                # ‡∏ï‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß ‡πÜ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö (‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å ‡πÜ + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
                if not uids:
                    return "-"
                names = []
                for uid in uids[:15]:
                    m = guild.get_member(uid)
                    names.append(m.mention if m else f"<@{uid}>")
                if len(uids) > 15:
                    names.append(f"... (+{len(uids)-15})")
                return ", ".join(names)

            embed = nextcord.Embed(
                title=f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ Raid ‚Ä¢ {date_str}",
                description=(
                    f"**‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î:** {accept_count} ‡∏Ñ‡∏ô\n"
                    f"{_mention_list(accept_ids)}\n\n"
                    f"**‡∏ï‡∏¥‡∏î‡∏ò‡∏∏‡∏£‡∏∞/‡πÑ‡∏°‡πà‡∏°‡∏≤:** {decline_count} ‡∏Ñ‡∏ô\n"
                    f"{_mention_list(decline_ids)}"
                ),
                color=nextcord.Color.green(),
                timestamp=nextcord.utils.utcnow()
            )
            embed.set_footer(text="MF_BOT ‚Ä¢ RAID Summary")

            await ch.send(embed=embed)

            # ‡∏ï‡∏µ‡∏ò‡∏á‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            d["summary_posted"] = True
            raid_db[key] = d
            _save_raid_db(raid_db)

        except Exception as e:
            print(f"[ERR] schedule_raid_summary runner: {e}")

    asyncio.create_task(_runner())

@bot.command(name="panel")
async def panel(ctx):
    if ctx.channel.id != BOT_CHANNEL_ID:
        await ctx.send("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return

    embed = nextcord.Embed(
        title="üõ†Ô∏è Control Panel MF_BOT üõ†Ô∏è",
        description=(
            "‡∏ä‡∏∏‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô/‡∏™‡∏ï‡∏≤‡∏ü\n"
            "‚Ä¢ **RAID_Check**: ‡∏™‡πà‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á Raid\n"
            "‚Ä¢ **Alarm DM**: ‡∏™‡πà‡∏á DM ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô\n"
            "‚Ä¢ **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ\n"
        ),
        color=nextcord.Color.dark_teal(),
        timestamp=nextcord.utils.utcnow()
    )
    await ctx.send(embed=embed, view=ControlPanel())

@bot.command(name="‡πÅ‡∏ú‡∏á")
async def panel_th(ctx):
    await panel(ctx)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

class RaidCheckView(nextcord.ui.View):
    def __init__(self, message_id: int):
        # persistent view ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
        super().__init__(timeout=None)
        self.message_id = str(message_id)

    def _ensure_entry(self):
        if self.message_id not in raid_db:
            # fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡∏£‡∏á
            raid_db[self.message_id] = {
                "date": datetime.now(BKK).strftime("%Y-%m-%d"),
                "accept": [],
                "decline": [],
                "summary_posted": False
            }

    async def _update_embed_counts(self, interaction: nextcord.Interaction):
        """‡∏õ‡∏£‡∏±‡∏ö embed ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            msg = await interaction.channel.fetch_message(int(self.message_id))
        except Exception:
            return  # ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°

        self._ensure_entry()
        d = raid_db[self.message_id]
        accept_count = len(set(d.get("accept", [])))
        decline_count = len(set(d.get("decline", [])))

        # ‡∏õ‡∏£‡∏±‡∏ö embed ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        if msg.embeds:
            e = msg.embeds[0]
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field/description ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î
            base_desc = e.description or ""
            # ‡∏ï‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            lines = [ln for ln in base_desc.splitlines() if not ln.strip().startswith(("**‡∏¢‡∏≠‡∏î‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö**", "**‡∏¢‡∏≠‡∏î‡πÑ‡∏°‡πà‡∏°‡∏≤**"))]
            lines.append(f"**‡∏¢‡∏≠‡∏î‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö**: {accept_count} ‡∏Ñ‡∏ô")
            lines.append(f"**‡∏¢‡∏≠‡∏î‡πÑ‡∏°‡πà‡∏°‡∏≤**: {decline_count} ‡∏Ñ‡∏ô")
            new_desc = "\n".join(lines)
            new_embed = nextcord.Embed(
                title=e.title or "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ RAID/Protect",
                description=new_desc,
                color=e.color or nextcord.Color.from_rgb(246,189,22),
                timestamp=e.timestamp or nextcord.utils.utcnow()
            )
            new_embed.set_footer(text=e.footer.text if e.footer else "MF_BOT ‚Ä¢ RAID Check", icon_url=(e.footer.icon_url if (e.footer and e.footer.icon_url) else nextcord.Embed.Empty))
            new_embed.set_author(name=e.author.name if e.author else nextcord.Embed.Empty, icon_url=(e.author.icon_url if e.author else nextcord.Embed.Empty))
            new_embed.set_thumbnail(url=e.thumbnail.url if e.thumbnail else nextcord.Embed.Empty)
            new_embed.set_image(url=e.image.url if e.image else nextcord.Embed.Empty)

            try:
                await msg.edit(embed=new_embed, view=self)
            except Exception as ex:
                print(f"[WARN] cannot edit check message: {ex}")

    @nextcord.ui.button(label="‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢ (‡∏°‡∏≤)", style=nextcord.ButtonStyle.success, emoji="‚úÖ", custom_id="raid_accept_btn")
    async def btn_accept(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        uid = interaction.user.id
        self._ensure_entry()
        d = raid_db[self.message_id]
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô accept ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å decline
        s_accept = set(d.get("accept", []))
        s_decline = set(d.get("decline", []))
        s_accept.add(uid)
        if uid in s_decline:
            s_decline.remove(uid)
        d["accept"] = list(s_accept)
        d["decline"] = list(s_decline)
        _save_raid_db(raid_db)

        # ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö ephemeral ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏ö‡∏ô embed
        if not interaction.response.is_done():
            await interaction.response.send_message("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ '‡∏°‡∏≤' ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        await self._update_embed_counts(interaction)

    @nextcord.ui.button(label="‡∏ï‡∏¥‡∏î‡∏ò‡∏∏‡∏£‡∏∞ (‡πÑ‡∏°‡πà‡∏°‡∏≤)", style=nextcord.ButtonStyle.danger, emoji="‚ùå", custom_id="raid_decline_btn")
    async def btn_decline(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        uid = interaction.user.id
        self._ensure_entry()
        d = raid_db[self.message_id]
        s_accept = set(d.get("accept", []))
        s_decline = set(d.get("decline", []))
        s_decline.add(uid)
        if uid in s_accept:
            s_accept.remove(uid)
        d["accept"] = list(s_accept)
        d["decline"] = list(s_decline)
        _save_raid_db(raid_db)

        if not interaction.response.is_done():
            await interaction.response.send_message("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ '‡πÑ‡∏°‡πà‡∏°‡∏≤' ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        await self._update_embed_counts(interaction)

@bot.event
async def on_ready():
    bot.add_view(RegisterView())
    bot.add_view(ControlPanel())
    print(f"Logged in as {bot.user} ({bot.user.id})")
    for key, d in raid_db.items():
        try:
            msg_id = int(key)
        except:
            continue
        # ‡∏ú‡∏π‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏£‡∏∏‡∏õ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏ú‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ)
        bot.add_view(RaidCheckView(msg_id))

        # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡∏∏‡∏õ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô)
        if not d.get("summary_posted"):
            # ‡∏´‡∏≤ channel_id ‡∏à‡∏≤‡∏Å CheckRaid_Channel_ID ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
            asyncio.create_task(schedule_raid_summary(
                guild_id=bot.guilds[0].id if bot.guilds else 0,
                channel_id=CheckRaid_Channel_ID,
                message_id=msg_id
            ))

if __name__ == "__main__":
    keep_alive()
    
bot.run(TOKEN)

#‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢ python MF_BOT_1am.py