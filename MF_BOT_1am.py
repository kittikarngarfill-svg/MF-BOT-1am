# MF_BOT_1am.py ‚Äî ‡∏£‡∏ß‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏° + ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô + ‡∏Å‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥ + ready ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Docker/Web
# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
# - ‡∏õ‡∏∏‡πà‡∏° Alarm DM ‡∏ó‡∏±‡πâ‡∏á Role
# - ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !‡∏õ‡∏∏‡πà‡∏° ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Alarm
# - ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° reaction ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
# - Welcome/Leave Embed
# - ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (Modal: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô/‡∏≠‡∏≤‡∏¢‡∏∏) ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏ô‡∏° + ‡∏Å‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON)
# - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå)
# - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á VC ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î, TTS ‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å/Deaf, ‡∏Å‡∏±‡∏ô connect ‡∏ã‡πâ‡∏≠‡∏ô, ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô
# - keep_alive (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå keep_alive.py)

import os
import sys
import json
import signal
import traceback
import asyncio
import shutil
import datetime
from zoneinfo import ZoneInfo
import aiohttp

from dotenv import load_dotenv

# ‡πÉ‡∏ä‡πâ discord.py (official)
import discord
from discord.ext import commands, tasks
from discord.utils import get

# ---------------- keep_alive (optional) ----------------
try:
    from keep_alive import keep_alive
    HAS_KEEP_ALIVE = True
except Exception:
    HAS_KEEP_ALIVE = False
    def keep_alive():
        pass

# ---------------- ENV loader ----------------
load_dotenv()

def require_env(name, cast=str, allow_empty=False, default_sentinel=object()):
    v = os.getenv(name)
    if v is None:
        if default_sentinel is not object():
            return default_sentinel
        print(f"[FATAL] Missing ENV: {name}", flush=True)
        sys.exit(1)
    if not allow_empty and str(v).strip() == "":
        print(f"[FATAL] Empty ENV: {name}", flush=True)
        sys.exit(1)
    try:
        return cast(v)
    except Exception as e:
        print(f"[FATAL] Bad ENV type for {name}: {v} ({e})", flush=True)
        sys.exit(1)

TOKEN = require_env("DISCORD_TOKEN", str)
GUILD_ID = require_env("GUILD_ID", int)
VC_CHANNEL_ID = require_env("VC_CHANNEL_ID", int)
TEXT_CHANNEL_ID = require_env("TEXT_CHANNEL_ID", int)
STATUS_UPDATE_INTERVAL = int(os.getenv("STATUS_UPDATE_INTERVAL", "30"))

# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡πÅ‡∏Å‡πâ/‡πÉ‡∏™‡πà‡πÉ‡∏ô .env ‡πÑ‡∏î‡πâ)
ROLE_ID = int(os.getenv("ROLE_ID", "1372176652989239336"))
BOT_CHANNEL_ID = int(os.getenv("BOT_CHANNEL_ID", "1403316515956064327"))
CHECKRAID_CHANNEL_ID = int(os.getenv("CHECKRAID_CHANNEL_ID", "1385971877079679006"))
WELCOME_CHANNEL_ID = int(os.getenv("WELCOME_CHANNEL_ID", "1342083527067304030"))
GOODBYE_CHANNEL_ID = int(os.getenv("GOODBYE_CHANNEL_ID", "1342083527067304030"))
ENABLE_VOICE = os.getenv("ENABLE_VOICE", "1") == "1"
PANEL_TITLE = "ü•á 1am SCUM TEAM ü•á"
TZ = ZoneInfo(os.getenv("TIMEZONE", "Asia/Bangkok"))
SUMMARY_HOUR = int(os.getenv("RAID_SUMMARY_HOUR", "19"))  # 19:00 ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢

print(f"[BOOT] ENV ok | guild={GUILD_ID} vc={VC_CHANNEL_ID} text={TEXT_CHANNEL_ID} "
      f"role={ROLE_ID} checkraid={CHECKRAID_CHANNEL_ID} voice={ENABLE_VOICE}", flush=True)

# ---------------- Intents / Bot ----------------
intents = discord.Intents.all()
intents.members = True
intents.message_content = True

bot = commands.Bot(
    command_prefix=commands.when_mentioned_or("!"),
    intents=intents,
    case_insensitive=True
)

# ---------------- Util: datetime / roles ----------------
def fmt_tz(dt: datetime.datetime | None) -> str:
    """format ‡πÄ‡∏õ‡πá‡∏ô Y-m-d H:M ‡∏ó‡∏µ‡πà‡πÇ‡∏ã‡∏ô TZ"""
    if not dt:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=datetime.timezone.utc)
    return dt.astimezone(TZ).strftime("%Y-%m-%d %H:%M")

def parse_iso_utc(s: str | None) -> datetime.datetime | None:
    if not s:
        return None
    try:
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ...Z ‡πÅ‡∏•‡∏∞ offset
        s2 = s.replace("Z", "+00:00")
        return datetime.datetime.fromisoformat(s2)
    except Exception:
        return None

def roles_string(member: discord.Member, limit: int = 10) -> str:
    roles = [r for r in member.roles if r.name != "@everyone"]
    if not roles:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
    names = [r.name for r in roles]
    if len(names) <= limit:
        return ", ".join(names)
    shown = ", ".join(names[:limit])
    return f"{shown} ‚Ä¶ (+{len(names)-limit})"

# ---------------- Signal & on_error hooks ----------------
def _graceful_shutdown(signum, frame):
    print(f"[SIGNAL] Received {signum} -> shutting down", flush=True)
    try:
        loop = getattr(bot, "loop", None)
        if loop and loop.is_running():
            loop.call_soon_threadsafe(lambda: asyncio.create_task(bot.close()))
        else:
            raise RuntimeError("event loop not running")
    except Exception as e:
        print(f"[SIGNAL] close failed: {e}", flush=True)
        try:
            bot.close()
        except Exception:
            pass
        raise SystemExit(0)

for s in (signal.SIGINT, signal.SIGTERM):
    try:
        signal.signal(s, _graceful_shutdown)
    except Exception:
        pass

@bot.event
async def on_error(event_method, *args, **kwargs):
    print(f"[on_error] in {event_method}", flush=True)
    traceback.print_exc()

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return
    if isinstance(error, commands.CheckFailure):
        return
    try:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: `{type(error).__name__}` ‚Äî {error}")
    except Exception:
        pass
    print(f"[CMD-ERROR] In {getattr(ctx, 'command', None)}: {repr(error)}", flush=True)

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot:
        return
    try:
        print(f"[MSG] #{getattr(message.channel, 'name', '?')} <{message.author}>: {message.content}", flush=True)
    except Exception:
        pass
    await bot.process_commands(message)

# ---------------- Voice prerequisites ----------------
FFMPEG_OK = shutil.which("ffmpeg") is not None
if ENABLE_VOICE:
    if not FFMPEG_OK:
        print("[WARN] ffmpeg not found - ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", flush=True)
    try:
        if not discord.opus.is_loaded():
            discord.opus.load_opus("libopus.so.0")  # Debian/Ubuntu
        print("[OK] Opus loaded", flush=True)
    except Exception as e:
        print(f"[ERROR] load Opus failed: {e}", flush=True)

voice_connect_lock = asyncio.Lock()
voice_client: discord.VoiceClient | None = None
joined_users = set()
last_voice_states = {}

def non_bot_count(ch: discord.VoiceChannel) -> int:
    return sum(1 for m in ch.members if not m.bot)

def tts_url(text: str) -> str:
    return f"https://translate.google.com/translate_tts?ie=UTF-8&q={text}&tl=th&client=tw-ob"

async def play_tts(vc: discord.VoiceClient | None, text: str):
    if not ENABLE_VOICE:
        return
    if not vc or not vc.is_connected():
        return
    if not FFMPEG_OK:
        print("[WARN] Skip TTS: ffmpeg not installed", flush=True)
        return
    url = tts_url(text)
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    print(f"Failed to get TTS: {resp.status}", flush=True)
                    return
                with open("tts.mp3", "wb") as f:
                    f.write(await resp.read())
    except Exception as e:
        print(f"[ERROR] TTS fetch failed: {e}", flush=True)
        return

    try:
        if not vc.is_playing():
            vc.play(discord.FFmpegPCMAudio("tts.mp3"))
            while vc.is_playing():
                await asyncio.sleep(0.3)
    except Exception as e:
        print(f"[ERROR] ffmpeg/voice play failed: {e}", flush=True)

# ---------------- Registration (JSON dict; ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ) ----------------
REG_FILE = "registered_users.json"

def _load_registered() -> dict[int, dict]:
    try:
        with open(REG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (list user_id) ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà (dict)
        if isinstance(data, list):
            return {int(uid): {"nickname": None, "age": None, "updated_at": None} for uid in data}
        if isinstance(data, dict):
            return {int(k): v for k, v in data.items()}
        return {}
    except Exception:
        return {}

def _save_registered(d: dict[int, dict]):
    try:
        with open(REG_FILE, "w", encoding="utf-8") as f:
            json.dump({str(k): v for k, v in d.items()}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[WARN] Save registered failed: {e}", flush=True)

registered_users: dict[int, dict] = _load_registered()

class RegisterModal(discord.ui.Modal, title="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1AM SCUM TEAM"):
    nickname = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡πá‡∏≠‡∏õ‡πÅ‡∏°‡πá‡∏õ", max_length=32)
    age = discord.ui.TextInput(label="‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)", placeholder="‡πÄ‡∏ä‡πà‡∏ô 49", max_length=3)

    async def on_submit(self, interaction: discord.Interaction) -> None:
        # ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        row = registered_users.get(interaction.user.id)
        if row and row.get("nickname"):
            await interaction.response.send_message(
                "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô**",
                ephemeral=True
            )
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1‚Äì120
        try:
            age_val = int(str(self.age.value).strip())
            if not (1 <= age_val <= 120):
                raise ValueError
        except Exception:
            await interaction.response.send_message(
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å **‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1‚Äì120**",
                ephemeral=True
            )
            return

        member = interaction.user
        new_nick = f"{self.nickname.value} ({age_val})"

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠
        me = interaction.guild.get_member(bot.user.id) or interaction.guild.me
        can_manage = bool(me and getattr(me, "guild_permissions", None) and me.guild_permissions.manage_nicknames)
        bot_top_pos = (me.top_role.position if (me and me.top_role) else 0)
        target_top_pos = (member.top_role.position if member.top_role else 0)

        changed_nick = False
        if can_manage and bot_top_pos > target_top_pos and member != interaction.guild.owner:
            try:
                await member.edit(nick=new_nick)
                changed_nick = True
            except discord.Forbidden:
                pass
            except Exception as e:
                print(f"[REG] edit nick error: {e}", flush=True)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (one-time)
        registered_users[member.id] = {
            "nickname": str(self.nickname.value).strip(),
            "age": age_val,
            "updated_at": datetime.datetime.utcnow().isoformat()
        }
        _save_registered(registered_users)

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• (‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ)
        if changed_nick:
            msg = (
                "‚úÖ **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**\n"
                f"‡∏ä‡∏∑‡πà‡∏≠:  `{self.nickname.value}`   ‚îÇ   ‡∏≠‡∏≤‡∏¢‡∏∏:  `{age_val}`   ‚Üí  **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô**  `{new_nick}`"
            )
        else:
            msg = (
                "‚úÖ **‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß**\n"
                f"‡∏ä‡∏∑‡πà‡∏≠:  `{self.nickname.value}`   ‚îÇ   ‡∏≠‡∏≤‡∏¢‡∏∏:  `{age_val}`\n"
                "‚ö†Ô∏è ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå/‡∏•‡∏≥‡∏î‡∏±‡∏ö role ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì"
            )
        await interaction.response.send_message(msg, ephemeral=True)


def make_register_panel_embed() -> discord.Embed:
    # ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    desc = (
        "üìù **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1AM SCUM TEAM** üìù\n\n"
        "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏\n\n"
        "**‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç**\n"
        "‚Ä¢ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ **‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô**\n"
        "‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö  `‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô  (‡∏≠‡∏≤‡∏¢‡∏∏)`\n"
        "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ **‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå**\n\n"
        "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\n"
        "1) ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n"
        "2) ‡∏Å‡∏£‡∏≠‡∏Å **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô** ‡πÅ‡∏•‡∏∞ **‡∏≠‡∏≤‡∏¢‡∏∏**\n"
        "3) ‡∏Å‡∏î‡∏™‡πà‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•\n\n"
        "**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå**\n"
        "‡∏ä‡∏∑‡πà‡∏≠:  `‡∏°‡πá‡∏≠‡∏õ‡πÅ‡∏õ‡πá‡∏õ`   ‚îÇ   ‡∏≠‡∏≤‡∏¢‡∏∏:  `49`   ‚Üí  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô  `‡∏°‡πá‡∏≠‡∏õ‡πÅ‡∏°‡πá‡∏õ (49)`"
    )
    emb = discord.Embed(title=PANEL_TITLE, description=desc, color=0x2ecc71)
    emb.set_footer(text="MF_BOT ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
    return emb

def build_myinfo_embed(member: discord.Member, row: dict | None) -> discord.Embed:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô/‡∏≠‡∏≤‡∏¢‡∏∏/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô/‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"""
    emb = discord.Embed(title="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", color=0x3498db)
    nickname = row.get("nickname") if row else None
    age = row.get("age") if row else None
    reg_dt = parse_iso_utc(row.get("updated_at")) if row else None

    emb.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", value=nickname or "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
    emb.add_field(name="‡∏≠‡∏≤‡∏¢‡∏∏", value=(str(age) if age is not None else "-"))
    emb.add_field(name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î", value=fmt_tz(member.joined_at), inline=False)
    emb.add_field(name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", value=fmt_tz(reg_dt), inline=False)
    emb.add_field(name="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=roles_string(member), inline=False)
    emb.set_thumbnail(url=member.display_avatar.url)
    emb.set_footer(text="‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ Asia/Bangkok")
    return emb


class RegisterView(discord.ui.View):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°: üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞ üë§ My Info"""
    def __init__(self):
        super().__init__(timeout=None)  # persistent

    @discord.ui.button(label="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", style=discord.ButtonStyle.success, emoji="üìù", custom_id="reg_open_modal")
    async def register(self, interaction: discord.Interaction, button: discord.ui.Button):
        # ‡∏ñ‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß -> ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏ã‡πâ‡∏≥
        if interaction.user.id in registered_users and registered_users[interaction.user.id].get("nickname"):
            return await interaction.response.send_message(
                "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß **‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô**",
                ephemeral=True
            )
        await interaction.response.send_modal(RegisterModal())

    @discord.ui.button(label="My Info", style=discord.ButtonStyle.secondary, emoji="üë§", custom_id="reg_myinfo_btn")
    async def myinfo(self, interaction: discord.Interaction, button: discord.ui.Button):
        row = registered_users.get(interaction.user.id)
        emb = build_myinfo_embed(interaction.user, row)
        await interaction.response.send_message(embed=emb, ephemeral=True)

# ---------------- Raid Check state (JSON) ----------------
RAID_STATE_FILE = "raid_state.json"
def load_raid_state():
    try:
        with open(RAID_STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"current": None}

def save_raid_state(state):
    try:
        with open(RAID_STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f)
    except Exception as e:
        print(f"[WARN] save raid_state failed: {e}", flush=True)

raid_state = load_raid_state()
# raid_state = {"current": {"date":"YYYY-MM-DD","channel_id": int,"message_id": int,"summary_sent": bool}}

# ---------------- Raid Check Views ----------------
class RaidCheckView(discord.ui.View):
    """‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏∞‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á CheckRaid ‡πÉ‡∏´‡πâ‡∏Å‡∏î '‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö' / '‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å' """
    def __init__(self, message_id: int):
        super().__init__(timeout=None)
        self.message_id = message_id

    @discord.ui.button(label="‚úÖ ‡∏•‡∏∏‡∏¢ !!", style=discord.ButtonStyle.success, custom_id="raid_accept_btn")
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            channel = interaction.guild.get_channel(CHECKRAID_CHANNEL_ID)
            if not isinstance(channel, discord.TextChannel):
                return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠", ephemeral=True)
            msg = await channel.fetch_message(self.message_id)
            await msg.add_reaction("‚úÖ")
            await interaction.response.send_message("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö ‚úÖ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: {e}", ephemeral=True)

    @discord.ui.button(label="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å", style=discord.ButtonStyle.danger, custom_id="raid_decline_btn")
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            channel = interaction.guild.get_channel(CHECKRAID_CHANNEL_ID)
            if not isinstance(channel, discord.TextChannel):
                return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠", ephemeral=True)
            msg = await channel.fetch_message(self.message_id)
            await msg.add_reaction("‚ùå")
            await interaction.response.send_message("‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚ùå ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: {e}", ephemeral=True)

class RoleMessageView(discord.ui.View):
    """‡∏õ‡∏∏‡πà‡∏° Alarm DM ‡∏´‡∏≤ Role"""
    def __init__(self):
        super().__init__(timeout=None)
    @discord.ui.button(label="Alarm", style=discord.ButtonStyle.danger, emoji="üö®", custom_id="alarm_dm_role")
    async def alarm_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.send_to_role(interaction, "üì¢ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å MF_BOT ‡∏à‡πâ‡∏≤! ‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏¥‡∏™‡∏î‡πà‡∏ß‡∏ô‡∏ô !!")
    async def send_to_role(self, interaction: discord.Interaction, message_text: str):
        role = interaction.guild.get_role(ROLE_ID)
        if not role:
            return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ", ephemeral=True)
        sent = 0
        for m in role.members:
            if m.bot:
                continue
            try:
                await m.send(message_text)
                sent += 1
                await asyncio.sleep(0.4)
            except:
                pass
        await interaction.response.send_message(f"üì® ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ {sent} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

class MainPanelView(discord.ui.View):
    """‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å (‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT)"""
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="Check Raid", style=discord.ButtonStyle.primary, emoji="‚öîÔ∏è", custom_id="panel_start_raid_check")
    async def start_raid_check(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.channel.id != BOT_CHANNEL_ID:
            return await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT", ephemeral=True)

        check_ch = interaction.guild.get_channel(CHECKRAID_CHANNEL_ID)
        if not isinstance(check_ch, discord.TextChannel):
            return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ", ephemeral=True)

        today = datetime.datetime.now(TZ).strftime("%Y-%m-%d")
        role_mention = f"<@&{ROLE_ID}>"

        embed = discord.Embed(
            title="‚öîÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ Raid/Protect üõ°Ô∏è",
            description=f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{today}**\n{role_mention} ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°/‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
            color=0x00C853
        )
        msg = await check_ch.send(embed=embed, view=RaidCheckView(0))  # ‡πÉ‡∏™‡πà 0 ‡∏Å‡πà‡∏≠‡∏ô
        await msg.edit(view=RaidCheckView(msg.id))  # ‡∏ú‡∏π‡∏Å message_id ‡∏à‡∏£‡∏¥‡∏á

        try:
            await msg.add_reaction("‚úÖ")
            await msg.add_reaction("‚ùå")
        except:
            pass

        raid_state["current"] = {
            "date": today,
            "channel_id": check_ch.id,
            "message_id": msg.id,
            "summary_sent": False
        }
        save_raid_state(raid_state)

        await interaction.response.send_message(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô <#{CHECKRAID_CHANNEL_ID}>", ephemeral=True)

    @discord.ui.button(label="‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", style=discord.ButtonStyle.secondary, emoji="üßæ", custom_id="panel_force_summary")
    async def force_summary(self, interaction: discord.Interaction, button: discord.ui.Button):
        res = await do_raid_summary(force=True)
        await interaction.response.send_message(res, ephemeral=True)

    @discord.ui.button(label="‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", style=discord.ButtonStyle.success, emoji="üìù", custom_id="panel_send_register")
    async def send_register(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.channel.send(embed=make_register_panel_embed(), view=RegisterView())
        await interaction.response.send_message("‚úÖ ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

    @discord.ui.button(label=" Alarm (DM Role)", style=discord.ButtonStyle.danger, emoji="üö®", custom_id="panel_send_alarm")
    async def send_alarm(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üö® Alarm Sender",
            description="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ DM ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Role ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
            color=0xF44336
        )
        await interaction.channel.send(embed=embed, view=RoleMessageView())
        await interaction.response.send_message("‚úÖ ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Alarm ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

# ---------------- ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ----------------
async def do_raid_summary(force: bool = False) -> str:
    """‡∏ô‡∏±‡∏ö‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡∏ô ‚úÖ/‚ùå ‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏£‡∏∑‡∏≠ force)"""
    cur = raid_state.get("current")
    if not cur:
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"

    today = datetime.datetime.now(TZ).strftime("%Y-%m-%d")
    if cur["date"] != today and not force:
        return "‚ùå ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"

    if cur.get("summary_sent") and not force:
        return "‚ÑπÔ∏è ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"

    guild = bot.get_guild(GUILD_ID)
    ch = guild.get_channel(cur["channel_id"]) if guild else None
    if not isinstance(ch, discord.TextChannel):
        return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠"

    try:
        msg = await ch.fetch_message(cur["message_id"])
    except Exception as e:
        return f"‚ùå ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö: {e}"

    yes = 0
    no = 0
    for r in msg.reactions:
        try:
            if str(r.emoji) == "‚úÖ":
                yes += r.count - 1 if r.me else r.count
            if str(r.emoji) == "‚ùå":
                no += r.count - 1 if r.me else r.count
        except:
            pass

    total = yes + no
    embed = discord.Embed(
        title=f"üßæ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‚Ä¢ {cur['date']}",
        description=f"**‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö:** {yes} ‡∏Ñ‡∏ô\n**‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å:** {no} ‡∏Ñ‡∏ô\n**‡∏£‡∏ß‡∏°:** {total} ‡∏Ñ‡∏ô",
        color=0x009688
    )
    await ch.send(embed=embed)

    cur["summary_sent"] = True
    raid_state["current"] = cur
    save_raid_state(raid_state)
    return "‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß"

@tasks.loop(minutes=1)
async def raid_summary_scheduler():
    """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ = 19:00 ‡∏ï‡∏≤‡∏° TZ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡πá‡∏™‡πà‡∏á"""
    now = datetime.datetime.now(TZ)
    if now.hour == SUMMARY_HOUR and now.minute in (0, 1, 2):  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ 3 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å
        cur = raid_state.get("current")
        if not cur:
            return
        if cur["date"] != now.strftime("%Y-%m-%d"):
            return
        if not cur.get("summary_sent"):
            print("[SCHED] Auto summary at 19:00", flush=True)
            try:
                await do_raid_summary(force=False)
            except Exception as e:
                print(f"[SCHED] summary error: {e}", flush=True)

# ---------------- ‡∏ï‡∏±‡∏ß‡∏Å‡∏π‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢) ----------------
async def restore_raidcheck_from_channel() -> bool:
    """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á CHECKRAID ‡πÅ‡∏•‡πâ‡∏ß restore view"""
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print("[RESTORE] Guild not found", flush=True)
        return False

    ch = guild.get_channel(CHECKRAID_CHANNEL_ID)
    if not isinstance(ch, discord.TextChannel):
        print("[RESTORE] CheckRaid channel not found", flush=True)
        return False

    try:
        async for msg in ch.history(limit=100):  # ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ~100 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if msg.author.id != bot.user.id:
                continue
            if not msg.embeds:
                continue
            emb = msg.embeds[0]
            title = (emb.title or "").strip()
            if title.startswith("üåÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠") or title.startswith("‚öîÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠"):
                raid_state["current"] = {
                    "date": datetime.datetime.now(TZ).strftime("%Y-%m-%d"),
                    "channel_id": ch.id,
                    "message_id": msg.id,
                    "summary_sent": False
                }
                save_raid_state(raid_state)
                bot.add_view(RaidCheckView(msg.id))
                print(f"[RESTORE] Re-attached RaidCheckView to message_id={msg.id}", flush=True)
                return True
    except Exception as e:
        print(f"[RESTORE] scan error: {e}", flush=True)
    return False

# ---------------- Commands ----------------
@bot.command(name="panel")
@commands.has_permissions(manage_guild=True)
async def cmd_panel(ctx: commands.Context):
    """‡∏™‡πà‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT)"""
    embed = discord.Embed(
        title="üõ†Ô∏è MF_BOT Control Panel üõ†Ô∏è",
        description=(
            "‚Ä¢ **Check Raid**: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°/‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡∏ô\n"
            "‚Ä¢ **‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ**: ‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 19:00)\n"
            "‚Ä¢ **‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô**: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô/‡∏≠‡∏≤‡∏¢‡∏∏) ‚Äî ‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ\n"
            "‚Ä¢ **Alarm (DM Role)**: ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô DM ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"
        ),
        color=0xFFD700
    )
    embed.set_footer(text="MF_BOT ‚Ä¢ Control Panel")
    await ctx.send(embed=embed, view=MainPanelView())

@bot.command(name="‡∏õ‡∏∏‡πà‡∏°")
async def cmd_buttons(ctx: commands.Context):
    """‡∏õ‡∏∏‡πà‡∏° Alarm DM (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)"""
    if ctx.channel.id != BOT_CHANNEL_ID:
        await ctx.send("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á BOT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    embed = discord.Embed(
        title="üö® Alarm Sender",
        description="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ DM ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Role ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
        color=0xF44336
    )
    await ctx.send(embed=embed, view=RoleMessageView())

@bot.command(name="‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠")
async def cmd_checkin(ctx: commands.Context):
    """‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡∏ô (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)"""
    if ctx.channel.id != CHECKRAID_CHANNEL_ID:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!")
        return
    today = datetime.datetime.now(TZ).strftime("%Y-%m-%d")
    role_mention = f"<@&{ROLE_ID}>"
    embed = discord.Embed(
        title="üåÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ Raid/Protect",
        description=f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{today}** \n{role_mention} ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
        color=0x00C853
    )
    msg = await ctx.send(embed=embed)
    await msg.add_reaction("‚úÖ")
    await msg.add_reaction("‚ùå")

    raid_state["current"] = {
        "date": today,
        "channel_id": ctx.channel.id,
        "message_id": msg.id,
        "summary_sent": False
    }
    save_raid_state(raid_state)

@bot.command(name="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
async def cmd_register(ctx: commands.Context):
    await ctx.send(embed=make_register_panel_embed(), view=RegisterView())

@bot.command(name="myinfo")
async def cmd_myinfo(ctx: commands.Context):
    row = registered_users.get(ctx.author.id)
    emb = build_myinfo_embed(ctx.author, row)
    await ctx.reply(embed=emb, mention_author=False)

@bot.command(name="unregister")
async def cmd_unregister(ctx: commands.Context):
    if ctx.author.id in registered_users:
        registered_users.pop(ctx.author.id, None)
        _save_registered(registered_users)
        await ctx.reply("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‚úÖ", mention_author=False)
    else:
        await ctx.reply("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", mention_author=False)

@bot.command()
async def ping(ctx: commands.Context):
    await ctx.send("pong!")

# ---------------- Member join/leave ----------------
@bot.event
async def on_member_join(member: discord.Member):
    print(f"üì• ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö {member} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°")
    channel = bot.get_channel(WELCOME_CHANNEL_ID)
    if channel and isinstance(channel, discord.TextChannel):
        embed = discord.Embed(
            title="ü•á ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà 1am SCUM TEAM ü•á",
            description=f"üôè ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤ {member.mention}\n‡∏°‡∏≤‡∏ô‡∏±‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πä‡∏¢!",
            color=0xFFD700
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        embed.set_footer(text="MF_BOT ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö")
        await channel.send(embed=embed)

@bot.event
async def on_member_remove(member: discord.Member):
    channel = bot.get_channel(GOODBYE_CHANNEL_ID)
    if channel and isinstance(channel, discord.TextChannel):
        embed = discord.Embed(
            title="üò¢ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
            description=f"{member.name} ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß",
            color=0xB0BEC5
        )
        await channel.send(embed=embed)

# ---------------- Presence / Ready ----------------
@bot.event
async def on_ready():
    print(f"Logged in as {bot.user} ({bot.user.id})", flush=True)

    # ‡πÄ‡∏£‡∏¥‡πà‡∏° tasks (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ try/except)
    try:
        update_status.start()
    except RuntimeError:
        pass
    try:
        raid_summary_scheduler.start()
    except RuntimeError:
        pass

    # ---------- Restore persistent views ----------
    bot.add_view(MainPanelView())
    bot.add_view(RoleMessageView())
    bot.add_view(RegisterView())

    # 1) ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° restore ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô
    restored = False
    try:
        cur = raid_state.get("current")
        if cur and isinstance(cur.get("message_id"), int):
            bot.add_view(RaidCheckView(cur["message_id"]))
            print(f"[RESTORE] RaidCheckView restored for message_id={cur['message_id']}", flush=True)
            restored = True
    except Exception as e:
        print(f"[RESTORE] Failed to restore from file: {e}", flush=True)

    # 2) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô Render ‡∏ü‡∏£‡∏µ) ‚Üí ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    if not restored:
        ok = await restore_raidcheck_from_channel()
        if not ok:
            print("[RESTORE] No raid_check message to restore", flush=True)

@tasks.loop(seconds=STATUS_UPDATE_INTERVAL)
async def update_status():
    guild = bot.get_guild(GUILD_ID)
    if guild:
        online_members = [m for m in guild.members if m.status != discord.Status.offline and not m.bot]
        activity = discord.Game(name=f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå {len(online_members)} ‡∏Ñ‡∏ô")
        await bot.change_presence(status=discord.Status.online, activity=activity)

@bot.event
async def on_disconnect():
    print("Bot disconnected! (gateway)", flush=True)

# ---------------- Voice state (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏∂‡πâ‡∏ô) ----------------
@bot.event
async def on_voice_state_update(member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
    if not ENABLE_VOICE:
        return
    if member.bot:
        return

    voice_channel = bot.get_channel(VC_CHANNEL_ID)
    if not isinstance(voice_channel, discord.VoiceChannel):
        return

    global voice_client

    try:
        vc_now = discord.utils.get(bot.voice_clients, guild=member.guild)
        if vc_now is not None:
            voice_client = vc_now

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ non-bot ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ñ‡∏≠‡∏î‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å
        if non_bot_count(voice_channel) == 0:
            if voice_client and voice_client.is_connected():
                await asyncio.sleep(5)
                if non_bot_count(voice_channel) == 0:
                    await voice_client.disconnect(force=True)
                    voice_client = None
                    print("Bot ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà", flush=True)
            return

        # ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≠ ‚Üí ‡∏ï‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô
        if voice_client is None or not voice_client.is_connected():
            async with voice_connect_lock:
                vc_now = discord.utils.get(bot.voice_clients, guild=member.guild)
                if vc_now is None or not vc_now.is_connected():
                    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á...", flush=True)
                    try:
                        voice_client = await voice_channel.connect(reconnect=False)
                        print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß", flush=True)
                    except Exception as e:
                        print(f"[ERROR] connect voice failed: {e}", flush=True)
                        return

        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å
        if after.channel == voice_channel and before.channel != voice_channel:
            if member.id not in joined_users:
                joined_users.add(member.id)
                await play_tts(voice_client, f"{member.display_name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")
        elif before.channel == voice_channel and after.channel != voice_channel:
            if member.id in joined_users:
                joined_users.remove(member.id)
                await play_tts(voice_client, f"{member.display_name} ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")

        # ‡πÄ‡∏î‡∏ü/‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏ü
        if before.self_deaf != after.self_deaf:
            if after.self_deaf:
                await play_tts(voice_client, f"{member.display_name} ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ó‡∏≥‡πÑ‡∏°")
            else:
                await play_tts(voice_client, f"{member.display_name} ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")

        last_voice_states[member.id] = after

    except Exception as e:
        print(f"[ERROR] on_voice_state_update: {e}", flush=True)

if ENABLE_VOICE and (not FFMPEG_OK or not discord.opus.is_loaded()):
    print("[VOICE] Dependencies not ready -> disabling voice features", flush=True)
    ENABLE_VOICE = False
    
# ---------------- Main ----------------
if __name__ == "__main__":
    if HAS_KEEP_ALIVE:
        keep_alive()
    try:
        print("[BOOT] starting bot.run()", flush=True)
        bot.run(TOKEN)
        print("[BOOT] bot.run() returned (client closed).", flush=True)
    except KeyboardInterrupt:
        print("[BOOT] KeyboardInterrupt -> exiting.", flush=True)
    except Exception as e:
        print("[FATAL] bot.run crashed:", e, flush=True)
        traceback.print_exc()
        sys.exit(1)
